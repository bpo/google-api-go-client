{
 "kind": "discovery#restDescription",
 "etag": "\"a3GBuXuTtUYW9BV1SIieU5LiL7w/3-RvkScNi9xYBzxOaIw825kE9N4\"",
 "discoveryVersion": "v1",
 "id": "youtube:v3",
 "name": "youtube",
 "canonicalName": "YouTube",
 "version": "v3",
 "revision": "20121116",
 "title": "YouTube API",
 "description": "Programmatic access to YouTube features.",
 "icons": {
  "x16": "http://www.google.com/images/icons/product/youtube-16.png",
  "x32": "http://www.google.com/images/icons/product/youtube-32.png"
 },
 "documentationLink": "https://developers.google.com/youtube",
 "protocol": "rest",
 "baseUrl": "https://www.googleapis.com/youtube/v3/",
 "basePath": "/youtube/v3/",
 "rootUrl": "https://www.googleapis.com/",
 "servicePath": "youtube/v3/",
 "batchPath": "batch",
 "parameters": {
  "alt": {
   "type": "string",
   "description": "Data format for the response.",
   "default": "json",
   "enum": [
    "json"
   ],
   "enumDescriptions": [
    "Responses with Content-Type of application/json"
   ],
   "location": "query"
  },
  "fields": {
   "type": "string",
   "description": "Selector specifying which fields to include in a partial response.",
   "location": "query"
  },
  "key": {
   "type": "string",
   "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
   "location": "query"
  },
  "oauth_token": {
   "type": "string",
   "description": "OAuth 2.0 token for the current user.",
   "location": "query"
  },
  "prettyPrint": {
   "type": "boolean",
   "description": "Returns response with indentations and line breaks.",
   "default": "true",
   "location": "query"
  },
  "quotaUser": {
   "type": "string",
   "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
   "location": "query"
  },
  "userIp": {
   "type": "string",
   "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
   "location": "query"
  }
 },
 "auth": {
  "oauth2": {
   "scopes": {
    "https://www.googleapis.com/auth/youtube": {
     "description": "Manage your YouTube account"
    },
    "https://www.googleapis.com/auth/youtube.readonly": {
     "description": "View your YouTube account"
    },
    "https://www.googleapis.com/auth/youtube.upload": {
     "description": "Manage your YouTube videos"
    },
    "https://www.googleapis.com/auth/youtubepartner": {
     "description": "View and manage your assets and associated content on YouTube"
    }
   }
  }
 },
 "schemas": {
  "Activity": {
   "id": "Activity",
   "type": "object",
   "description": "An activity resource contains information about an action that a particular channel, or user, has taken on YouTube. The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded.",
   "properties": {
    "contentDetails": {
     "$ref": "ActivityContentDetails",
     "description": "The contentDetails object contains information about the content associated with the activity. For example, if the snippet.type value is videoRated, then the contentDetails object's content identifies the rated video."
    },
    "etag": {
     "type": "string",
     "description": "The ETag of the activity resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the activity."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For activity resources, the value will be youtube#activity.",
     "default": "youtube#activity"
    },
    "snippet": {
     "$ref": "ActivitySnippet",
     "description": "The snippet object contains basic details about the activity, including the activity's type and group ID."
    }
   }
  },
  "ActivityContentDetails": {
   "id": "ActivityContentDetails",
   "type": "object",
   "description": "Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.",
   "properties": {
    "bulletin": {
     "type": "object",
     "description": "The bulletin object contains details about a channel bulletin post. This object is only present if the snippet.type is bulletin.",
     "properties": {
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object contains information that identifies the resource associated with a bulletin post."
      }
     }
    },
    "comment": {
     "type": "object",
     "description": "The comment object contains information about a resource that received a comment. This property is only present if the snippet.type is comment.",
     "properties": {
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object contains information that identifies the resource associated with the comment."
      }
     }
    },
    "favorite": {
     "type": "object",
     "description": "The favorite object contains information about a video that was marked as a favorite video. This property is only present if the snippet.type is favorite.",
     "properties": {
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object contains information that identifies the resource that was marked as a favorite."
      }
     }
    },
    "like": {
     "type": "object",
     "description": "The like object contains information about a resource that received a positive (like) rating. This property is only present if the snippet.type is like.",
     "properties": {
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object contains information that identifies the rated resource."
      }
     }
    },
    "playlistItem": {
     "type": "object",
     "description": "The playlistItem object contains information about a new playlist item. This property is only present if the snippet.type is playlistItem.",
     "properties": {
      "playlistId": {
       "type": "string",
       "description": "The value that YouTube uses to uniquely identify the playlist."
      },
      "playlistItemId": {
       "type": "string",
       "description": "ID of the item within the playlist."
      },
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object contains information about the resource that was added to the playlist."
      }
     }
    },
    "recommendation": {
     "type": "object",
     "description": "The recommendation object contains information about a recommended resource. This property is only present if the snippet.type is recommendation.",
     "properties": {
      "reason": {
       "type": "string",
       "description": "The reason that the resource is recommended to the user."
      },
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object contains information that identifies the recommended resource."
      },
      "seedResourceId": {
       "$ref": "ResourceId",
       "description": "The seedResourceId object contains information about the resource that caused the recommendation."
      }
     }
    },
    "social": {
     "type": "object",
     "description": "The social object contains details about a social network post. This property is only present if the snippet.type is social.",
     "properties": {
      "author": {
       "type": "string",
       "description": "The author of the social network post."
      },
      "imageUrl": {
       "type": "string",
       "description": "An image of the post's author."
      },
      "referenceUrl": {
       "type": "string",
       "description": "The URL of the social network post."
      },
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object encapsulates information that identifies the resource associated with a social network post."
      },
      "type": {
       "type": "string",
       "description": "The name of the social network."
      }
     }
    },
    "subscription": {
     "type": "object",
     "description": "The subscription object contains information about a channel that a user subscribed to. This property is only present if the snippet.type is subscription.",
     "properties": {
      "resourceId": {
       "$ref": "ResourceId",
       "description": "The resourceId object contains information that identifies the resource that the user subscribed to."
      }
     }
    },
    "upload": {
     "type": "object",
     "description": "The upload object contains information about the uploaded video. This property is only present if the snippet.type is upload.",
     "properties": {
      "videoId": {
       "type": "string",
       "description": "The ID that YouTube uses to uniquely identify the uploaded video."
      }
     }
    }
   }
  },
  "ActivityListResponse": {
   "id": "ActivityListResponse",
   "type": "object",
   "description": "A paginated list of activities returned as a response to youtube.activities.list calls.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the response."
    },
    "items": {
     "type": "array",
     "description": "A list of activities, or events, that match the request criteria.",
     "items": {
      "$ref": "Activity"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#activityListResponse.",
     "default": "youtube#activityListResponse"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
    },
    "pageInfo": {
     "$ref": "PageInfo",
     "description": "The pageInfo object encapsulates paging information for the result set."
    },
    "prevPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
    }
   }
  },
  "ActivitySnippet": {
   "id": "ActivitySnippet",
   "type": "object",
   "description": "Basic details about an activity, including title, description, thumbnails, activity type and group.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the channel associated with the activity."
    },
    "description": {
     "type": "string",
     "description": "The description of the resource primarily associated with the activity.",
     "annotations": {
      "required": [
       "youtube.activities.insert"
      ]
     }
    },
    "groupId": {
     "type": "string",
     "description": "The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value."
    },
    "publishedAt": {
     "type": "string",
     "description": "The date and time that the activity occurred. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    },
    "thumbnails": {
     "type": "object",
     "description": "A map of thumbnail images associated with the resource that is primarily associated with the activity. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
     "additionalProperties": {
      "$ref": "Thumbnail",
      "description": "The thumbnail image's name."
     }
    },
    "title": {
     "type": "string",
     "description": "The title of the resource primarily associated with the activity."
    },
    "type": {
     "type": "string",
     "description": "The type of activity that the resource describes."
    }
   }
  },
  "Channel": {
   "id": "Channel",
   "type": "object",
   "description": "A channel resource contains information about a YouTube channel.",
   "properties": {
    "contentDetails": {
     "$ref": "ChannelContentDetails",
     "description": "The contentDetails object encapsulates information about the channel's content."
    },
    "etag": {
     "type": "string",
     "description": "The ETag for the channel resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the channel."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For channel resources, the value will be youtube#channel.",
     "default": "youtube#channel"
    },
    "snippet": {
     "$ref": "ChannelSnippet",
     "description": "The snippet object contains basic details about the channel, such as its title, description, and thumbnail images."
    },
    "statistics": {
     "$ref": "ChannelStatistics",
     "description": "The statistics object encapsulates statistics for the channel."
    },
    "status": {
     "$ref": "ChannelStatus",
     "description": "The status object encapsulates information about the privacy status of the channel."
    },
    "topicDetails": {
     "$ref": "ChannelTopicDetails",
     "description": "The topicDetails object encapsulates information about Freebase topics associated with the channel."
    }
   }
  },
  "ChannelContentDetails": {
   "id": "ChannelContentDetails",
   "type": "object",
   "description": "Details about the content of a channel.",
   "properties": {
    "relatedPlaylists": {
     "type": "object",
     "description": "The relatedPlaylists object is a map that identifies playlists associated with the channel, such as the channel's uploaded videos or favorite videos. You can retrieve any of these playlists using the playlists.list method.",
     "properties": {
      "favorites": {
       "type": "string",
       "description": "The ID of the playlist that contains the channel's favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
      },
      "likes": {
       "type": "string",
       "description": "The ID of the playlist that contains the channel's liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
      },
      "uploads": {
       "type": "string",
       "description": "The ID of the playlist that contains the channel's uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos."
      },
      "watchHistory": {
       "type": "string",
       "description": "The ID of the playlist that contains the channel's watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
      },
      "watchLater": {
       "type": "string",
       "description": "The ID of the channel's watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list."
      }
     }
    }
   }
  },
  "ChannelListResponse": {
   "id": "ChannelListResponse",
   "type": "object",
   "description": "A paginated list of channels returned as the response to a youtube.channels.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag for the response."
    },
    "items": {
     "type": "array",
     "description": "A list of channels that match the request criteria.",
     "items": {
      "$ref": "Channel"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#channelListResponse.",
     "default": "youtube#channelListResponse"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
    },
    "pageInfo": {
     "$ref": "PageInfo",
     "description": "The pageInfo object encapsulates paging information for the result set."
    },
    "prevPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
    }
   }
  },
  "ChannelSnippet": {
   "id": "ChannelSnippet",
   "type": "object",
   "description": "Basic details about a channel, including title, description and thumbnails.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the channel."
    },
    "description": {
     "type": "string",
     "description": "The channel's description."
    },
    "publishedAt": {
     "type": "string",
     "description": "The date and time that the channel was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    },
    "thumbnails": {
     "type": "object",
     "description": "A map of thumbnail images associated with the channel. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
     "additionalProperties": {
      "$ref": "Thumbnail",
      "description": "The thumbnail image's name. This value is used as the key in the snippet.thumbnails map."
     }
    },
    "title": {
     "type": "string",
     "description": "The channel's title."
    }
   }
  },
  "ChannelStatistics": {
   "id": "ChannelStatistics",
   "type": "object",
   "description": "Statistics about a channel: number of subscribers, number of videos in the channel, etc.",
   "properties": {
    "commentCount": {
     "type": "string",
     "description": "The number of comments for the channel.",
     "format": "uint64"
    },
    "subscriberCount": {
     "type": "string",
     "description": "The number of subscribers that the channel has.",
     "format": "uint64"
    },
    "videoCount": {
     "type": "string",
     "description": "The number of videos uploaded to the channel.",
     "format": "uint64"
    },
    "viewCount": {
     "type": "string",
     "description": "The number of times the channel has been viewed.",
     "format": "uint64"
    }
   }
  },
  "ChannelStatus": {
   "id": "ChannelStatus",
   "type": "object",
   "description": "JSON template for the status part of a channel.",
   "properties": {
    "privacyStatus": {
     "type": "string",
     "description": "Privacy status of the channel."
    }
   }
  },
  "ChannelTopicDetails": {
   "id": "ChannelTopicDetails",
   "type": "object",
   "description": "Freebase topic information related to the channel.",
   "properties": {
    "topicIds": {
     "type": "array",
     "description": "A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.",
     "items": {
      "type": "string"
     }
    }
   }
  },
  "GeoPoint": {
   "id": "GeoPoint",
   "type": "object",
   "description": "A geoPoint holds geo location information associated with a YouTube resource.",
   "properties": {
    "elevation": {
     "type": "number",
     "description": "Altitude above the Earth, in meters.",
     "format": "double"
    },
    "latitude": {
     "type": "number",
     "description": "Latitude in degrees.",
     "format": "double"
    },
    "longitude": {
     "type": "number",
     "description": "Longitude in degrees.",
     "format": "double"
    }
   }
  },
  "GuideCategory": {
   "id": "GuideCategory",
   "type": "object",
   "description": "A guideCategory resource identifies a category that YouTube algorithmically assigns based on a channel's content or other indicators, such as the channel's popularity. The list is similar to video categories, with the difference being that a video's uploader can assign a video category but only YouTube can assign a channel category.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the guideCategory resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the guide category."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For guideCategory resources, the value will be youtube#guideCategory/code\u003e.",
     "default": "youtube#guideCategory"
    },
    "snippet": {
     "$ref": "GuideCategorySnippet",
     "description": "The snippet object contains basic details about the category, such as its title."
    }
   }
  },
  "GuideCategoryListResponse": {
   "id": "GuideCategoryListResponse",
   "type": "object",
   "description": "A paginated list of guide categories returned as the response to a youtube.guideCategories.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the response."
    },
    "items": {
     "type": "array",
     "description": "A list of categories that can be associated with YouTube channels. In this map, the category ID is the map key, and its value is the corresponding guideCategory resource.",
     "items": {
      "$ref": "GuideCategory"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#guideCategoryListResponse.",
     "default": "youtube#guideCategoryListResponse"
    }
   }
  },
  "GuideCategorySnippet": {
   "id": "GuideCategorySnippet",
   "type": "object",
   "description": "Basic details about a guide category.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the channel publishing the guide category.",
     "default": "UCBR8-60-B28hp2BmDPdntcQ"
    },
    "title": {
     "type": "string",
     "description": "The category's title."
    }
   }
  },
  "PageInfo": {
   "id": "PageInfo",
   "type": "object",
   "description": "Paging details for lists of resources, including total number of items available and number of resources returned in a single page.",
   "properties": {
    "resultsPerPage": {
     "type": "integer",
     "description": "The number of results included in the API response.",
     "format": "int32"
    },
    "totalResults": {
     "type": "integer",
     "description": "The total number of results in the result set.",
     "format": "int32"
    }
   }
  },
  "Playlist": {
   "id": "Playlist",
   "type": "object",
   "description": "A playlist resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private.\n\nYouTube also uses playlists to identify special collections of videos for a channel, such as:  \n- uploaded videos \n- favorite videos \n- positively rated (liked) videos \n- watch history \n- watch later  To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel.\n\nYou can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag for the playlist resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the playlist."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For video resources, the value will be youtube#playlist.",
     "default": "youtube#playlist"
    },
    "snippet": {
     "$ref": "PlaylistSnippet",
     "description": "The snippet object contains basic details about the playlist, such as its title and description."
    },
    "status": {
     "$ref": "PlaylistStatus",
     "description": "The status object contains status information for the playlist."
    }
   }
  },
  "PlaylistItem": {
   "id": "PlaylistItem",
   "type": "object",
   "description": "A playlistItem resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist.\n\nYouTube uses playlists to identify special collections of videos for a channel, such as:  \n- uploaded videos \n- favorite videos \n- positively rated (liked) videos \n- watch history \n- watch later  To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information.\n\nYou can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user's channel.",
   "properties": {
    "contentDetails": {
     "$ref": "PlaylistItemContentDetails",
     "description": "The contentDetails object is included in the resource if the included item is a YouTube video. The object contains additional information about the video."
    },
    "etag": {
     "type": "string",
     "description": "The ETag for the playlist item resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the playlist item."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For playlist item resources, the value will be youtube#playlistItem.",
     "default": "youtube#playlistItem"
    },
    "snippet": {
     "$ref": "PlaylistItemSnippet",
     "description": "The snippet object contains basic details about the playlist item, such as its title and position in the playlist."
    }
   }
  },
  "PlaylistItemContentDetails": {
   "id": "PlaylistItemContentDetails",
   "type": "object",
   "description": "Details about the content of a playlist item, such as the video or the video fragment start and end time included in the playlist.",
   "properties": {
    "endAt": {
     "type": "string",
     "description": "The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video."
    },
    "note": {
     "type": "string",
     "description": "A user-generated note for this item."
    },
    "startAt": {
     "type": "string",
     "description": "The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0."
    },
    "videoId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request."
    }
   }
  },
  "PlaylistItemListResponse": {
   "id": "PlaylistItemListResponse",
   "type": "object",
   "description": "A paginated list of playlist items returned as the response to a youtube.playlistItems.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag for the response."
    },
    "items": {
     "type": "array",
     "description": "A list of playlist items that match the request criteria.",
     "items": {
      "$ref": "PlaylistItem"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#playlistItemListResponse.",
     "default": "youtube#playlistItemListResponse"
    },
    "nextPageToken": {
     "type": "string",
     "description": "A token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
    },
    "pageInfo": {
     "$ref": "PageInfo",
     "description": "The pageInfo object encapsulates paging information for the result set."
    },
    "prevPageToken": {
     "type": "string",
     "description": "A token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
    }
   }
  },
  "PlaylistItemSnippet": {
   "id": "PlaylistItemSnippet",
   "type": "object",
   "description": "Basic details about an item included in a playlist, including title, description, thumbnails, playlist the item is part of and position of the item inside the playlist.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the user that added the item to the playlist."
    },
    "description": {
     "type": "string",
     "description": "The item's description."
    },
    "playlistId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the playlist that the playlist item is in.",
     "annotations": {
      "required": [
       "youtube.playlistItems.insert"
      ]
     }
    },
    "position": {
     "type": "integer",
     "description": "The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.",
     "format": "uint32"
    },
    "publishedAt": {
     "type": "string",
     "description": "The date and time that the item was added to the playlist. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    },
    "resourceId": {
     "$ref": "ResourceId",
     "description": "The id object contains information that can be used to uniquely identify the resource that is included in the playlist as the playlist item.",
     "annotations": {
      "required": [
       "youtube.playlistItems.insert"
      ]
     }
    },
    "thumbnails": {
     "type": "object",
     "description": "A map of thumbnail images associated with the playlist item. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
     "additionalProperties": {
      "$ref": "Thumbnail",
      "description": "The thumbnail image's name. This value is used as the key in the snippet.thumbnails map."
     }
    },
    "title": {
     "type": "string",
     "description": "The item's title."
    }
   }
  },
  "PlaylistListResponse": {
   "id": "PlaylistListResponse",
   "type": "object",
   "description": "A paginated list of playlists returned as the response to a youtube.playlists.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the response."
    },
    "items": {
     "type": "array",
     "description": "A list of playlists that match the request criteria.",
     "items": {
      "$ref": "Playlist"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#playlistListResponse.",
     "default": "youtube#playlistListResponse"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
    },
    "pageInfo": {
     "$ref": "PageInfo",
     "description": "The pageInfo object encapsulates paging information for the result set."
    },
    "prevPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
    }
   }
  },
  "PlaylistSnippet": {
   "id": "PlaylistSnippet",
   "type": "object",
   "description": "Basic details about a playlist, including title, description and thumbnails.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the channel that published the playlist."
    },
    "description": {
     "type": "string",
     "description": "The playlist's description."
    },
    "publishedAt": {
     "type": "string",
     "description": "The date and time that the playlist was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    },
    "thumbnails": {
     "type": "object",
     "description": "A map of thumbnail images associated with the playlist. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
     "additionalProperties": {
      "$ref": "Thumbnail",
      "description": "The thumbnail image's name. This value is used as the key in the snippet.thumbnails map."
     }
    },
    "title": {
     "type": "string",
     "description": "The playlist's title.",
     "annotations": {
      "required": [
       "youtube.playlists.insert",
       "youtube.playlists.update"
      ]
     }
    }
   }
  },
  "PlaylistStatus": {
   "id": "PlaylistStatus",
   "type": "object",
   "description": "The status details of a playlist describes whether the playlist is private.",
   "properties": {
    "privacyStatus": {
     "type": "string",
     "description": "The playlist's privacy status."
    }
   }
  },
  "ResourceId": {
   "id": "ResourceId",
   "type": "object",
   "description": "A resource id is a generic reference that points to another YouTube resource.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel."
    },
    "kind": {
     "type": "string",
     "description": "The kind, or type, of the referred resource."
    },
    "playlistId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist."
    },
    "videoId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video."
    }
   }
  },
  "SearchListResponse": {
   "id": "SearchListResponse",
   "type": "object",
   "description": "A paginated list of search results returned as the response to a youtube.search.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag for the response."
    },
    "items": {
     "type": "array",
     "description": "A list of results that match the search criteria.",
     "items": {
      "$ref": "SearchResult"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#searchListResponse.",
     "default": "youtube#searchListResponse"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
    },
    "pageInfo": {
     "$ref": "PageInfo",
     "description": "The pageInfo object encapsulates paging information for the search result set."
    },
    "prevPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
    }
   }
  },
  "SearchResult": {
   "id": "SearchResult",
   "type": "object",
   "description": "A search result contains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the search result."
    },
    "id": {
     "$ref": "ResourceId",
     "description": "The id object contains information that can be used to uniquely identify the resource that matches the search request."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this resource, the value will be youtube#searchResult.",
     "default": "youtube#searchResult"
    },
    "snippet": {
     "$ref": "SearchResultSnippet",
     "description": "The snippet object contains basic details about a search result, such as its title or description. For example, if the search result is a video, then the title will be the video's title and the description will be the video's description."
    }
   }
  },
  "SearchResultSnippet": {
   "id": "SearchResultSnippet",
   "type": "object",
   "description": "Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies."
    },
    "description": {
     "type": "string",
     "description": "A description of the search result."
    },
    "publishedAt": {
     "type": "string",
     "description": "The creation date and time of the resource that the search result identifies. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    },
    "thumbnails": {
     "type": "object",
     "description": "A map of thumbnail images associated with the search result. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
     "additionalProperties": {
      "$ref": "Thumbnail",
      "description": "The thumbnail image's name. This value is used as the key in the snippet.thumbnails map."
     }
    },
    "title": {
     "type": "string",
     "description": "The title to display for the search result."
    }
   }
  },
  "Subscription": {
   "id": "Subscription",
   "type": "object",
   "description": "A subscription resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.",
   "properties": {
    "contentDetails": {
     "$ref": "SubscriptionContentDetails",
     "description": "The contentDetails object contains basic statistics about the subscription."
    },
    "etag": {
     "type": "string",
     "description": "The ETag of the subscription resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the subscription."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For subscription resources, the value will be youtube#subscription.",
     "default": "youtube#subscription"
    },
    "snippet": {
     "$ref": "SubscriptionSnippet",
     "description": "The snippet object contains basic details about the subscription, including its title and the channel that the user subscribed to."
    }
   }
  },
  "SubscriptionContentDetails": {
   "id": "SubscriptionContentDetails",
   "type": "object",
   "description": "Details about the content to witch a subscription refers.",
   "properties": {
    "newItemCount": {
     "type": "integer",
     "description": "The number of new items in the subscription since its content was last read.",
     "format": "uint32"
    },
    "totalItemCount": {
     "type": "integer",
     "description": "The approximate number of items that the subscription points to.",
     "format": "uint32"
    }
   }
  },
  "SubscriptionListResponse": {
   "id": "SubscriptionListResponse",
   "type": "object",
   "description": "A paginated list of subscriptions returned as the response to a youtube.subscriptions.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the response."
    },
    "items": {
     "type": "array",
     "description": "A list of subscriptions that match the request criteria.",
     "items": {
      "$ref": "Subscription"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#subscriptionListResponse.",
     "default": "youtube#subscriptionListResponse"
    },
    "nextPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set."
    },
    "pageInfo": {
     "$ref": "PageInfo",
     "description": "The pageInfo object encapsulates paging information for the result set."
    },
    "prevPageToken": {
     "type": "string",
     "description": "The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set."
    }
   }
  },
  "SubscriptionSnippet": {
   "id": "SubscriptionSnippet",
   "type": "object",
   "description": "Basic details about a subscription, including title, description and thumbnails of the subscribed item.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the subscriber's channel."
    },
    "description": {
     "type": "string",
     "description": "The subscription's details."
    },
    "publishedAt": {
     "type": "string",
     "description": "The date and time that the subscription was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    },
    "resourceId": {
     "$ref": "ResourceId",
     "description": "The id object contains information about the channel that the user subscribed to.",
     "annotations": {
      "required": [
       "youtube.subscriptions.insert"
      ]
     }
    },
    "thumbnails": {
     "type": "object",
     "description": "A map of thumbnail images associated with the subscription. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
     "additionalProperties": {
      "$ref": "Thumbnail",
      "description": "The thumbnail image's name."
     }
    },
    "title": {
     "type": "string",
     "description": "The subscription's title."
    }
   }
  },
  "Thumbnail": {
   "id": "Thumbnail",
   "type": "object",
   "description": "A thumbnail is an image representing a YouTube resource.",
   "properties": {
    "url": {
     "type": "string",
     "description": "The thumbnail image's URL."
    }
   }
  },
  "Video": {
   "id": "Video",
   "type": "object",
   "description": "A video resource represents a YouTube video.",
   "properties": {
    "contentDetails": {
     "$ref": "VideoContentDetails",
     "description": "The contentDetails object contains information about the video content, including the length of the video and its aspect ratio."
    },
    "etag": {
     "type": "string",
     "description": "The ETag of the video resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the video."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For video resources, the value will be youtube#video.",
     "default": "youtube#video"
    },
    "player": {
     "$ref": "VideoPlayer",
     "description": "The player object contains information that you would use to play the video in an embedded player."
    },
    "recordingDetails": {
     "$ref": "VideoRecordingDetails",
     "description": "The recordingDetails object encapsulates information about the location, date and address where the video was recorded."
    },
    "snippet": {
     "$ref": "VideoSnippet",
     "description": "The snippet object contains basic details about the video, such as its title, description, and category."
    },
    "statistics": {
     "$ref": "VideoStatistics",
     "description": "The statistics object contains statistics about the video."
    },
    "status": {
     "$ref": "VideoStatus",
     "description": "The status object contains information about the video's uploading, processing, and privacy statuses."
    },
    "topicDetails": {
     "$ref": "VideoTopicDetails",
     "description": "The topicDetails object encapsulates information about Freebase topics associated with the video."
    }
   }
  },
  "VideoCategory": {
   "id": "VideoCategory",
   "type": "object",
   "description": "A videoCategory resource identifies a category that has been or could be associated with uploaded videos.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the videoCategory resource."
    },
    "id": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the video category."
    },
    "kind": {
     "type": "string",
     "description": "The type of the API resource. For video category resources, the value will be youtube#videoCategory.",
     "default": "youtube#videoCategory"
    },
    "snippet": {
     "$ref": "VideoCategorySnippet",
     "description": "The snippet object contains basic details about the video category, including its title."
    }
   }
  },
  "VideoCategoryListResponse": {
   "id": "VideoCategoryListResponse",
   "type": "object",
   "description": "A paginated list of video categories returned as the response to a youtube.videoCategory.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the response."
    },
    "items": {
     "type": "array",
     "description": "A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.",
     "items": {
      "$ref": "VideoCategory"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#videoCategoryListResponse.",
     "default": "youtube#videoCategoryListResponse"
    }
   }
  },
  "VideoCategorySnippet": {
   "id": "VideoCategorySnippet",
   "type": "object",
   "description": "Basic details about a video category, such as its localized title.",
   "properties": {
    "channelId": {
     "type": "string",
     "description": "The YouTube channel that created the video category.",
     "default": "UCBR8-60-B28hp2BmDPdntcQ"
    },
    "title": {
     "type": "string",
     "description": "The video category's title."
    }
   }
  },
  "VideoContentDetails": {
   "id": "VideoContentDetails",
   "type": "object",
   "description": "Details about the media content of a YouTube video.",
   "properties": {
    "duration": {
     "type": "string",
     "description": "The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long."
    },
    "regionRestriction": {
     "type": "object",
     "description": "The regionRestriction object contains information about the countries where a video is (or is not) viewable. The object will contain either the contentDetails.regionRestriction.allowed property or the contentDetails.regionRestriction.blocked property.",
     "properties": {
      "allowed": {
       "type": "array",
       "description": "A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.",
       "items": {
        "type": "string"
       }
      },
      "blocked": {
       "type": "array",
       "description": "A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.",
       "items": {
        "type": "string"
       }
      }
     }
    }
   }
  },
  "VideoListResponse": {
   "id": "VideoListResponse",
   "type": "object",
   "description": "A paginated list of videos returned as the response to a youtube.videos.list call.",
   "properties": {
    "etag": {
     "type": "string",
     "description": "The ETag of the response."
    },
    "items": {
     "type": "array",
     "description": "A list of videos that match the request criteria.",
     "items": {
      "$ref": "Video"
     }
    },
    "kind": {
     "type": "string",
     "description": "The type of the API response. For this operation, the value will be youtube#videoListResponse.",
     "default": "youtube#videoListResponse"
    }
   }
  },
  "VideoPlayer": {
   "id": "VideoPlayer",
   "type": "object",
   "description": "Player to be used for a video playback.",
   "properties": {
    "embedHtml": {
     "type": "string",
     "description": "An \u003ciframe\u003e tag that embeds a player that will play the video."
    }
   }
  },
  "VideoRecordingDetails": {
   "id": "VideoRecordingDetails",
   "type": "object",
   "description": "Recording information associated with the video.",
   "properties": {
    "location": {
     "$ref": "GeoPoint",
     "description": "The geolocation information associated with the video."
    },
    "locationDescription": {
     "type": "string",
     "description": "The text description of the location where the video was recorded."
    },
    "recordingDate": {
     "type": "string",
     "description": "The date and time when the video was recorded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    }
   }
  },
  "VideoSnippet": {
   "id": "VideoSnippet",
   "type": "object",
   "description": "Basic details about a video, including title, description, uploader, thumbnails and category.",
   "properties": {
    "categoryId": {
     "type": "string",
     "description": "The YouTube video category associated with the video."
    },
    "channelId": {
     "type": "string",
     "description": "The ID that YouTube uses to uniquely identify the channel that the video was uploaded to."
    },
    "description": {
     "type": "string",
     "description": "The video's description."
    },
    "publishedAt": {
     "type": "string",
     "description": "The date and time that the video was uploaded. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
     "format": "date-time"
    },
    "tags": {
     "type": "array",
     "description": "A list of keyword tags associated with the video. Tags may contain spaces. This field is only visible to the video's uploader.",
     "items": {
      "type": "string"
     }
    },
    "thumbnails": {
     "type": "object",
     "description": "A map of thumbnail images associated with the video. For each object in the map, the key is the name of the thumbnail image, and the value is an object that contains other information about the thumbnail.",
     "additionalProperties": {
      "$ref": "Thumbnail",
      "description": "The thumbnail image's name. This value is used as the key in the snippet.thumbnails map."
     }
    },
    "title": {
     "type": "string",
     "description": "The video's title."
    }
   }
  },
  "VideoStatistics": {
   "id": "VideoStatistics",
   "type": "object",
   "description": "Statistics about the video, such as the number of times the video was viewed or liked.",
   "properties": {
    "commentCount": {
     "type": "string",
     "description": "The number of comments for the video.",
     "format": "uint64"
    },
    "dislikeCount": {
     "type": "string",
     "description": "The number of users who have indicated that they disliked the video by giving it a negative rating.",
     "format": "uint64"
    },
    "favoriteCount": {
     "type": "string",
     "description": "The number of users who currently have the video marked as a favorite video.",
     "format": "uint64"
    },
    "likeCount": {
     "type": "string",
     "description": "The number of users who have indicated that they liked the video by giving it a positive rating.",
     "format": "uint64"
    },
    "viewCount": {
     "type": "string",
     "description": "The number of times the video has been viewed.",
     "format": "uint64"
    }
   }
  },
  "VideoStatus": {
   "id": "VideoStatus",
   "type": "object",
   "description": "The status of a video details the video's upload status and privacy status.",
   "properties": {
    "failureReason": {
     "type": "string",
     "description": "This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed."
    },
    "privacyStatus": {
     "type": "string",
     "description": "The video's privacy status."
    },
    "rejectionReason": {
     "type": "string",
     "description": "This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected."
    },
    "uploadStatus": {
     "type": "string",
     "description": "The status of the uploaded video."
    }
   }
  },
  "VideoTopicDetails": {
   "id": "VideoTopicDetails",
   "type": "object",
   "description": "Freebase topic information related to the video.",
   "properties": {
    "topicIds": {
     "type": "array",
     "description": "A list of Freebase topic IDs associated with the video. You can retrieve information about each topic using the Freebase Topic API.",
     "items": {
      "type": "string"
     }
    }
   }
  }
 },
 "resources": {
  "activities": {
   "methods": {
    "insert": {
     "id": "youtube.activities.insert",
     "path": "activities",
     "httpMethod": "POST",
     "description": "Posts a bulletin for a specific channel. (The user submitting the request must be authorized to act on the channel's behalf.)",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet and contentDetails.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "Activity"
     },
     "response": {
      "$ref": "Activity"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube"
     ]
    },
    "list": {
     "id": "youtube.activities.list",
     "path": "activities",
     "httpMethod": "GET",
     "description": "Returns a list of channel activity events that match the request criteria. For example, you can retrieve events associated with a particular channel, events associated with the user's subscriptions and Google+ friends, or the YouTube home page feed, which is customized for each user.",
     "parameters": {
      "channelId": {
       "type": "string",
       "description": "The channelId parameter specifies a unique YouTube channel ID. The API will then return a list of that channel's activities.",
       "location": "query"
      },
      "home": {
       "type": "string",
       "description": "Set this parameter's value to true to retrieve the activity feed that displays on the YouTube home page for the currently authenticated user.",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "USE_DESCRIPTION --- channels:list:maxResults",
       "default": "5",
       "format": "uint32",
       "minimum": "0",
       "maximum": "50",
       "location": "query"
      },
      "mine": {
       "type": "boolean",
       "description": "Set this parameter's value to true to retrieve a feed of the authenticated user's activities.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "USE_DESCRIPTION --- channels:list:pageToken",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more activity resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set part=snippet, the API response will also contain all of those nested properties.",
       "required": true,
       "location": "query"
      },
      "publishedAfter": {
       "type": "string",
       "description": "The publishedAfter parameter specifies the earliest date and time that an activity could have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be included in the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
       "format": "date-time",
       "location": "query"
      },
      "publishedBefore": {
       "type": "string",
       "description": "The publishedBefore parameter specifies the date and time before which an activity must have occurred for that activity to be included in the API response. If the parameter value specifies a day, but not a time, then any activities that occurred that day will be excluded from the result set. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
       "format": "date-time",
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "ActivityListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly"
     ]
    }
   }
  },
  "channels": {
   "methods": {
    "list": {
     "id": "youtube.channels.list",
     "path": "channels",
     "httpMethod": "GET",
     "description": "Returns a collection of zero or more channel resources that match the request criteria.",
     "parameters": {
      "categoryId": {
       "type": "string",
       "description": "The categoryId parameter specifies a YouTube guide category, thereby requesting YouTube channels associated with that category.",
       "location": "query"
      },
      "id": {
       "type": "string",
       "description": "The id parameter specifies a comma-separated list of the YouTube channel ID(s) for the resource(s) that are being retrieved. In a channel resource, the id property specifies the channel's YouTube channel ID.",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "The maxResults parameter specifies the maximum number of items that should be returned in the result set.",
       "default": "5",
       "format": "uint32",
       "minimum": "0",
       "maximum": "50",
       "location": "query"
      },
      "mine": {
       "type": "boolean",
       "description": "Set this parameter's value to true to instruct the API to only return channels owned by the authenticated user.",
       "location": "query"
      },
      "mySubscribers": {
       "type": "string",
       "description": "Set this parameter's value to true to retrieve a list of channels that subscribed to the authenticated user's channel.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more channel resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, statistics, and topicDetails.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set part=contentDetails, the API response will also contain all of those nested properties.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "ChannelListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  },
  "guideCategories": {
   "methods": {
    "list": {
     "id": "youtube.guideCategories.list",
     "path": "guideCategories",
     "httpMethod": "GET",
     "description": "Returns a list of categories that can be associated with YouTube channels.",
     "parameters": {
      "hl": {
       "type": "string",
       "description": "The hl parameter specifies the language that will be used for text values in the API response.",
       "default": "en-US",
       "location": "query"
      },
      "id": {
       "type": "string",
       "description": "The id parameter specifies a comma-separated list of the YouTube channel category ID(s) for the resource(s) that are being retrieved. In a guideCategory resource, the id property specifies the YouTube channel category ID.",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more guideCategory resource properties that the API response will include. The part names that you can include in the parameter value are id and snippet.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a guideCategory resource, the snippet property contains other properties, such as the category's title. If you set part=snippet, the API response will also contain all of those nested properties.",
       "required": true,
       "location": "query"
      },
      "regionCode": {
       "type": "string",
       "description": "The regionCode parameter instructs the API to return the list of guide categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "GuideCategoryListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  },
  "playlistItems": {
   "methods": {
    "delete": {
     "id": "youtube.playlistItems.delete",
     "path": "playlistItems",
     "httpMethod": "DELETE",
     "description": "Deletes a playlist item.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The id parameter specifies the YouTube playlist item ID for the playlist item that is being deleted. In a playlistItem resource, the id property specifies the playlist item's ID.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "insert": {
     "id": "youtube.playlistItems.insert",
     "path": "playlistItems",
     "httpMethod": "POST",
     "description": "Adds a resource to a playlist.",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet and contentDetails.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "PlaylistItem"
     },
     "response": {
      "$ref": "PlaylistItem"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "list": {
     "id": "youtube.playlistItems.list",
     "path": "playlistItems",
     "httpMethod": "GET",
     "description": "Returns a collection of playlist items that match the API request parameters. You can retrieve all of the playlist items in a specified playlist or retrieve one or more playlist items by their unique IDs.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The id parameter specifies a comma-separated list of one or more unique playlist item IDs.",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "USE_DESCRIPTION --- channels:list:maxResults",
       "default": "5",
       "format": "uint32",
       "minimum": "0",
       "maximum": "50",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "USE_DESCRIPTION --- channels:list:pageToken",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set part=snippet, the API response will contain all of those properties.",
       "required": true,
       "location": "query"
      },
      "playlistId": {
       "type": "string",
       "description": "The playlistId parameter specifies the unique ID of the playlist for which you want to retrieve playlist items. Note that even though this is an optional parameter, every request to retrieve playlist items must specify a value for either the id parameter or the playlistId parameter.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "PlaylistItemListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "update": {
     "id": "youtube.playlistItems.update",
     "path": "playlistItems",
     "httpMethod": "PUT",
     "description": "Modifies a playlist item. For example, you could update the item's position in the playlist.",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet and contentDetails.\n\nNote that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "PlaylistItem"
     },
     "response": {
      "$ref": "PlaylistItem"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  },
  "playlists": {
   "methods": {
    "delete": {
     "id": "youtube.playlists.delete",
     "path": "playlists",
     "httpMethod": "DELETE",
     "description": "Deletes a playlist.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The id parameter specifies the YouTube playlist ID for the playlist that is being deleted. In a playlist resource, the id property specifies the playlist's ID.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "insert": {
     "id": "youtube.playlists.insert",
     "path": "playlists",
     "httpMethod": "POST",
     "description": "Creates a playlist.",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet and status.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "Playlist"
     },
     "response": {
      "$ref": "Playlist"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "list": {
     "id": "youtube.playlists.list",
     "path": "playlists",
     "httpMethod": "GET",
     "description": "Returns a collection of playlists that match the API request parameters. For example, you can retrieve all playlists that the authenticated user owns, or you can retrieve one or more playlists by their unique IDs.",
     "parameters": {
      "channelId": {
       "type": "string",
       "description": "This value indicates that the API should only return the specified channel's playlists.",
       "location": "query"
      },
      "id": {
       "type": "string",
       "description": "The id parameter specifies a comma-separated list of the YouTube playlist ID(s) for the resource(s) that are being retrieved. In a playlist resource, the id property specifies the playlist's YouTube playlist ID.",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "USE_DESCRIPTION --- channels:list:maxResults",
       "default": "5",
       "format": "uint32",
       "minimum": "0",
       "maximum": "50",
       "location": "query"
      },
      "mine": {
       "type": "boolean",
       "description": "Set this parameter's value to true to instruct the API to only return playlists owned by the authenticated user.",
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "USE_DESCRIPTION --- channels:list:pageToken",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and status.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set part=snippet, the API response will contain all of those properties.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "PlaylistListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "update": {
     "id": "youtube.playlists.update",
     "path": "playlists",
     "httpMethod": "PUT",
     "description": "Modifies a playlist. For example, you could change a playlist's title, description, or privacy status.",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet and status.\n\nNote that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist's privacy setting is contained in the status part. As such, if your request is updating a private playlist, and the request's part parameter value includes the status part, the playlist's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the playlist will revert to the default privacy setting.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "Playlist"
     },
     "response": {
      "$ref": "Playlist"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  },
  "search": {
   "methods": {
    "list": {
     "id": "youtube.search.list",
     "path": "search",
     "httpMethod": "GET",
     "description": "Returns a collection of search results that match the query parameters specified in the API request. By default, a search result set identifies matching video, channel, and playlist resources, but you can also configure queries to only retrieve a specific type of resource.",
     "parameters": {
      "maxResults": {
       "type": "integer",
       "description": "USE_DESCRIPTION --- channels:list:maxResults",
       "default": "5",
       "format": "uint32",
       "minimum": "0",
       "maximum": "50",
       "location": "query"
      },
      "order": {
       "type": "string",
       "description": "The order parameter specifies the method that will be used to order resources in the API response.",
       "default": "SEARCH_SORT_RELEVANCE",
       "enum": [
        "date",
        "rating",
        "relevance",
        "viewCount"
       ],
       "enumDescriptions": [
        "Resources are sorted in reverse chronological order based on the date they were created.",
        "Resources are sorted from highest to lowest rating.",
        "Resources are sorted based on their relevance to the search query. This is the default value for this parameter.",
        "Resources are sorted from highest to lowest number of views."
       ],
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "USE_DESCRIPTION --- channels:list:pageToken",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more search resource properties that the API response will include. The part names that you can include in the parameter value are id and snippet.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a search result, the snippet property contains other properties that identify the result's title, description, and so forth. If you set part=snippet, the API response will also contain all of those nested properties.",
       "required": true,
       "location": "query"
      },
      "published": {
       "type": "string",
       "description": "The published parameter indicates that the API response should only contain resources created within the specified time period.",
       "enum": [
        "any",
        "thisMonth",
        "thisWeek",
        "today"
       ],
       "enumDescriptions": [
        "Do not filter results based on their creation date. This is the default value.",
        "Return videos that were uploaded within the past month.",
        "Return videos that were uploaded within the past week.",
        "Return videos that were uploaded today."
       ],
       "location": "query"
      },
      "q": {
       "type": "string",
       "description": "The q parameter specifies the query term to search for.",
       "location": "query"
      },
      "relatedToVideoId": {
       "type": "string",
       "description": "The relatedToVideoId parameter retrieves a list of videos that are related to the video that the parameter value identifies. The parameter value must be set to a YouTube video ID and, if you are using this parameter, the type parameter must be set to video.",
       "location": "query"
      },
      "topicId": {
       "type": "string",
       "description": "The topicId parameter indicates that the API response should only contain resources associated with the specified topic. The value identifies a Freebase topic ID.",
       "location": "query"
      },
      "type": {
       "type": "string",
       "description": "The type parameter restricts a search query to only retrieve a particular type of resource.",
       "default": "video,channel,playlist",
       "location": "query"
      },
      "videoCaption": {
       "type": "string",
       "description": "The videoCaption parameter indicates whether the API should filter video search results based on whether they have captions.",
       "enum": [
        "any",
        "closedCaption",
        "none"
       ],
       "enumDescriptions": [
        "Do not filter results based on caption availability.",
        "Only include videos that have captions.",
        "Only include videos that do not have captions."
       ],
       "location": "query"
      },
      "videoDefinition": {
       "type": "string",
       "description": "The videoDefinition parameter lets you restrict a search to only include either high definition (HD) or standard definition (SD) videos. HD videos are available for playback in at least 720p, though higher resolutions, like 1080p, might also be available.",
       "enum": [
        "any",
        "high",
        "standard"
       ],
       "enumDescriptions": [
        "Return all videos, regardless of their resolution.",
        "Only retrieve HD videos.",
        "Only retrieve videos in standard definition."
       ],
       "location": "query"
      },
      "videoDimension": {
       "type": "string",
       "description": "The videoDimension parameter lets you restrict a search to only retrieve 2D or 3D videos.",
       "enum": [
        "2d",
        "3d",
        "any"
       ],
       "enumDescriptions": [
        "Restrict search results to exclude 3D videos.",
        "Restrict search results to only include 3D videos.",
        "Include both 3D and non-3D videos in returned results. This is the default value."
       ],
       "location": "query"
      },
      "videoDuration": {
       "type": "string",
       "description": "The videoDuration parameter filters video search results based on their duration.",
       "enum": [
        "any",
        "long",
        "medium",
        "short"
       ],
       "enumDescriptions": [
        "Do not filter video search results based on their duration. This is the default value.",
        "Only include videos longer than 20 minutes.",
        "Only include videos that are between four and 20 minutes long (inclusive).",
        "Only include videos that are less than four minutes long."
       ],
       "location": "query"
      },
      "videoLicense": {
       "type": "string",
       "description": "The videoLicense parameter filters search results to only include videos with a particular license. YouTube lets video uploaders choose to attach either the Creative Commons license or the standard YouTube license to each of their videos.",
       "enum": [
        "any",
        "creativeCommon",
        "youtube"
       ],
       "enumDescriptions": [
        "Return all videos, regardless of which license they have, that match the query parameters.",
        "Only return videos that have a Creative Commons license. Users can reuse videos with this license in other videos that they create. Learn more.",
        "Only return videos that have the standard YouTube license."
       ],
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "SearchListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  },
  "subscriptions": {
   "methods": {
    "delete": {
     "id": "youtube.subscriptions.delete",
     "path": "subscriptions",
     "httpMethod": "DELETE",
     "description": "Deletes a subscription.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The id parameter specifies the YouTube subscription ID for the resource that is being deleted. In a subscription resource, the id property specifies the YouTube subscription ID.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "insert": {
     "id": "youtube.subscriptions.insert",
     "path": "subscriptions",
     "httpMethod": "POST",
     "description": "Adds a subscription for the authenticated user's channel.",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet and contentDetails.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "Subscription"
     },
     "response": {
      "$ref": "Subscription"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "list": {
     "id": "youtube.subscriptions.list",
     "path": "subscriptions",
     "httpMethod": "GET",
     "description": "Returns subscription resources that match the API request criteria.",
     "parameters": {
      "channelId": {
       "type": "string",
       "description": "The channelId parameter specifies a YouTube channel ID. The API will only return that channel's subscriptions.",
       "location": "query"
      },
      "forChannelId": {
       "type": "string",
       "description": "The forChannelId parameter specifies a comma-separated list of channel IDs. The API response will then only contain subscriptions matching those channels.",
       "location": "query"
      },
      "id": {
       "type": "string",
       "description": "The id parameter specifies a comma-separated list of the YouTube subscription ID(s) for the resource(s) that are being retrieved. In a subscription resource, the id property specifies the YouTube subscription ID.",
       "location": "query"
      },
      "maxResults": {
       "type": "integer",
       "description": "USE_DESCRIPTION --- channels:list:maxResults",
       "default": "5",
       "format": "uint32",
       "minimum": "0",
       "maximum": "50",
       "location": "query"
      },
      "mine": {
       "type": "boolean",
       "description": "Set this parameter's value to true to retrieve a feed of the authenticated user's subscriptions.",
       "location": "query"
      },
      "order": {
       "type": "string",
       "description": "The order parameter specifies the method that will be used to sort resources in the API response.",
       "default": "SUBSCRIPTION_ORDER_RELEVANCE",
       "enum": [
        "alphabetical",
        "relevance",
        "unread"
       ],
       "enumDescriptions": [
        "Sort alphabetically.",
        "Sort by relevance.",
        "Sort by order of activity."
       ],
       "location": "query"
      },
      "pageToken": {
       "type": "string",
       "description": "USE_DESCRIPTION --- channels:list:pageToken",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set part=snippet, the API response will also contain all of those nested properties.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "SubscriptionListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  },
  "videoCategories": {
   "methods": {
    "list": {
     "id": "youtube.videoCategories.list",
     "path": "videoCategories",
     "httpMethod": "GET",
     "description": "Returns a list of categories that can be associated with YouTube videos.",
     "parameters": {
      "hl": {
       "type": "string",
       "description": "The hl parameter specifies the language that should be used for text values in the API response.",
       "default": "en_US",
       "location": "query"
      },
      "id": {
       "type": "string",
       "description": "The id parameter specifies a comma-separated list of video category IDs for the resources that you are retrieving.",
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.",
       "required": true,
       "location": "query"
      },
      "regionCode": {
       "type": "string",
       "description": "The regionCode parameter instructs the API to return the list of video categories available in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code.",
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "response": {
      "$ref": "VideoCategoryListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  },
  "videos": {
   "methods": {
    "delete": {
     "id": "youtube.videos.delete",
     "path": "videos",
     "httpMethod": "DELETE",
     "description": "Deletes a YouTube video.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The id parameter specifies the YouTube video ID for the resource that is being deleted. In a video resource, the id property specifies the video's ID.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "id"
     ],
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "insert": {
     "id": "youtube.videos.insert",
     "path": "videos",
     "httpMethod": "POST",
     "description": "Uploads a video to YouTube and optionally sets the video's metadata.",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet, contentDetails, player, statistics, status, and topicDetails. However, not all of those parts contain properties that can be set when setting or updating a video's metadata. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "Video"
     },
     "response": {
      "$ref": "Video"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.upload"
     ],
     "supportsMediaUpload": true,
     "mediaUpload": {
      "accept": [
       "application/octet-stream",
       "video/*"
      ],
      "maxSize": "64GB",
      "protocols": {
       "simple": {
        "multipart": true,
        "path": "/upload/youtube/v3/videos"
       },
       "resumable": {
        "multipart": true,
        "path": "/resumable/upload/youtube/v3/videos"
       }
      }
     }
    },
    "list": {
     "id": "youtube.videos.list",
     "path": "videos",
     "httpMethod": "GET",
     "description": "Returns a list of videos that match the API request parameters.",
     "parameters": {
      "id": {
       "type": "string",
       "description": "The id parameter specifies a comma-separated list of the YouTube video ID(s) for the resource(s) that are being retrieved. In a video resource, the id property specifies the video's ID.",
       "required": true,
       "location": "query"
      },
      "part": {
       "type": "string",
       "description": "The part parameter specifies a comma-separated list of one or more video resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, player, statistics, status, and topicDetails.\n\nIf the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set part=snippet, the API response will contain all of those properties.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "id",
      "part"
     ],
     "response": {
      "$ref": "VideoListResponse"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtube.readonly",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    },
    "update": {
     "id": "youtube.videos.update",
     "path": "videos",
     "httpMethod": "PUT",
     "description": "Updates a video's metadata.",
     "parameters": {
      "part": {
       "type": "string",
       "description": "The part parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.\n\nThe part names that you can include in the parameter value are snippet, contentDetails, player, statistics, status, and topicDetails.\n\nNote that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting.\n\nIn addition, not all of those parts contain properties that can be set when setting or updating a video's metadata. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.",
       "required": true,
       "location": "query"
      }
     },
     "parameterOrder": [
      "part"
     ],
     "request": {
      "$ref": "Video"
     },
     "response": {
      "$ref": "Video"
     },
     "scopes": [
      "https://www.googleapis.com/auth/youtube",
      "https://www.googleapis.com/auth/youtubepartner"
     ]
    }
   }
  }
 }
}
